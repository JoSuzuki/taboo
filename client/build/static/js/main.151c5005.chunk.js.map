{"version":3,"sources":["shared/constants.ts","services/socket/socket.ts","components/Card/Card.tsx","components/Round/Round.tsx","components/Game/Game.tsx","App.tsx","index.tsx"],"names":["CLIENT_EVENTS","SERVER_EVENTS","GAME_STATE","ROUND_STATE","TEAMS","socket","io","Card","card","style","padding","display","flexDirection","alignItems","border","borderRadius","margin","id","fontSize","fontWeight","word","toUpperCase","borderTop","tabu","map","key","Round","roomName","round","player","state","WAITING","Fragment","speaker","onClick","emit","START_ROUND","name","PLAYING","watcher","SCORE","SKIP","INVALIDATE","Game","gameState","console","log","START_GAME","playerId","process","LOBBY_STATE","App","React","useState","setRoomName","playerName","setPlayerName","setPlayer","lobbyState","setLobbyState","players","setPlayers","setGameState","number","setRound","scores","setScores","setCard","on","GAME_STARTED","data","PLAYERS_IN_GAME","DEAL_CARD","UPDATE_SCORES","ROUND_STARTED","ROUND_ENDED","value","onChange","e","target","JOIN","filter","team","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.151c5005.chunk.js","sourcesContent":["export enum CLIENT_EVENTS {\n  JOIN = \"join\",\n  START_GAME = \"startGame\",\n  SCORE = \"score\",\n  SKIP = \"skip\",\n  INVALIDATE = \"invalidate\",\n  START_ROUND = 'startRound',\n};\n\nexport enum SERVER_EVENTS {\n  PLAYERS_IN_GAME = \"playersInGame\",\n  GAME_STARTED = \"gameStarted\",\n  GAME_STATE = \"gameState\",\n  DEAL_CARD = \"dealCard\",\n  UPDATE_SCORES = \"updateScores\",\n  ROUND_STARTED = 'roundStarted',\n  ROUND_ENDED = 'roundEnded',\n};\n\nexport interface EventData {\n  [SERVER_EVENTS.PLAYERS_IN_GAME]: { players: IPlayer[] };\n  [SERVER_EVENTS.GAME_STARTED]: { gameState:GAME_STATE, round: IRound },\n  [SERVER_EVENTS.GAME_STATE]: { player: IPlayer, gameState: GAME_STATE, round: IRound, scores: IScores },\n  [SERVER_EVENTS.DEAL_CARD]: { card: ICard },\n  [SERVER_EVENTS.UPDATE_SCORES]: { scores: IScores },\n  [SERVER_EVENTS.ROUND_STARTED]: { round: IRound },\n  [SERVER_EVENTS.ROUND_ENDED]: { round: IRound },\n  [CLIENT_EVENTS.JOIN]: { roomName: string, playerName: string },\n  [CLIENT_EVENTS.START_GAME]: { roomName: string, playerId: playerId },\n  [CLIENT_EVENTS.SCORE]: { roomName: string },\n  [CLIENT_EVENTS.SKIP]: { roomName: string },\n  [CLIENT_EVENTS.INVALIDATE]: { roomName: string },\n  [CLIENT_EVENTS.START_ROUND]: { roomName: string },\n};\n\nexport enum GAME_STATE {\n  WAITING = \"waiting\",\n  PLAYING = \"playing\",\n};\n\nexport enum ROUND_STATE {\n  WAITING = \"waiting\",\n  PLAYING = \"playing\",\n};\n\nexport const TEAMS = {\n  0: \"blue\" as 'blue',\n  1: \"red\" as 'red',\n};\n\ntype playerId = string;\ntype cardId = number;\n\nexport interface IPlayer {\n  id: playerId;\n  name: string;\n  team: 'blue' | 'red';\n};\n\nexport interface IRound {\n  number: number,\n  state: ROUND_STATE,\n  speaker: IPlayer,\n  watcher: IPlayer,\n}\n\nexport interface IScores {\n  blue: number;\n  red: number;\n}\n\nexport interface ICard {\n  id: cardId;\n  word: string;\n  tabu: string[]\n}","import io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000');\n\nexport default socket;","import React from 'react';\nimport { ICard } from \"../../shared/constants\";\n\ninterface CardProps {\n  card: ICard;\n}\n\nconst Card: React.FC<CardProps> = ({ card }) => {\n  return (\n    <div style={{ padding: '40px', display: 'flex', flexDirection: 'column', alignItems: 'center', border: '1px solid blue', borderRadius: '8px', margin: '20px' }}>\n      <div>Card: {card.id}</div>\n      <div style={{ fontSize: '20px' }}>Palavra:</div>\n      <div style={{ fontSize: '20px', fontWeight: 'bold' }}>{card.word.toUpperCase()}</div>\n      <div style={{ borderTop: '1px solid gray' }}></div>\n      <div>Taboos:</div>\n      {card.tabu.map(tabu => <div key={tabu}>{tabu}</div>)}\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport { IRound, IPlayer, ROUND_STATE, ICard, CLIENT_EVENTS, EventData } from '../../shared/constants';\nimport socket from '../../services/socket/socket';\nimport Card from '../Card/Card';\n\ninterface RoundProps {\n  roomName: string;\n  round: IRound;\n  player: IPlayer;\n  card: ICard;\n}\n\nconst Round: React.FC<RoundProps> = ({ roomName, round, player, card }) => {\n  switch (round.state) {\n    case ROUND_STATE.WAITING:\n      return (\n        <React.Fragment>\n          {round.speaker?.id === player?.id ? (\n            <button\n              onClick={() =>\n                socket.emit(CLIENT_EVENTS.START_ROUND, { roomName } as EventData[CLIENT_EVENTS.START_ROUND])\n              }\n            >\n              começar rodada\n            </button>\n          ) : (\n            <div>Esperando jogador: {round.speaker?.name} começar a rodada</div>\n          )}\n        </React.Fragment>\n      );\n    case ROUND_STATE.PLAYING:\n      return (\n        <React.Fragment>\n          {(round.speaker?.id === player?.id ||\n            round.watcher?.id === player?.id) && card && <Card card={card} />}\n          {round.speaker?.id === player?.id && (\n            <React.Fragment>\n              <button\n                onClick={() => socket.emit(CLIENT_EVENTS.SCORE, { roomName } as EventData[CLIENT_EVENTS.SCORE])}\n              >\n                Pontuar\n              </button>\n              <button\n                onClick={() => socket.emit(CLIENT_EVENTS.SKIP, { roomName } as EventData[CLIENT_EVENTS.SKIP])}\n              >\n                Pular\n              </button>\n            </React.Fragment>\n          )}\n          {round.watcher?.id === player?.id && (\n            <React.Fragment>\n              <button\n                onClick={() =>\n                  socket.emit(CLIENT_EVENTS.INVALIDATE, { roomName } as EventData[CLIENT_EVENTS.INVALIDATE])\n                }\n              >\n                Invalidar\n              </button>\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      );\n  }\n};\n\nexport default Round;","import React from 'react';\nimport { GAME_STATE, IRound, IPlayer, ICard, CLIENT_EVENTS, EventData } from '../../shared/constants';\nimport socket from '../../services/socket/socket';\nimport Round from '../Round/Round';\n\ninterface GameProps {\n  roomName: string;\n  gameState: GAME_STATE;\n  round: IRound;\n  player: IPlayer;\n  card: ICard;\n}\n\nconst Game: React.FC<GameProps> = ({ roomName, gameState, round, player, card }) => {\n  console.log(gameState, round, player);\n  switch (gameState) {\n    case GAME_STATE.WAITING:\n      return (\n        <React.Fragment>\n          <div>Espere todo mundo entrar para começar o jogo!</div>\n          <button\n            onClick={() => {\n              socket.emit(CLIENT_EVENTS.START_GAME, {\n                roomName,\n                playerId: player.id,\n              } as EventData[CLIENT_EVENTS.START_GAME]);\n            }}\n          >\n            Começar\n          </button>\n        </React.Fragment>\n      );\n    case GAME_STATE.PLAYING:\n      return (\n        <React.Fragment>\n          <div>Rodada de:{round.speaker?.name}</div>\n          <div>Vigia:{round.watcher?.name}</div>\n          <Round\n            roomName={roomName}\n            round={round}\n            player={player}\n            card={card}\n          />\n        </React.Fragment>\n      );\n  }\n};\n\nexport default Game;","import React from 'react';\nimport { CLIENT_EVENTS, SERVER_EVENTS, EventData, ICard, GAME_STATE, ROUND_STATE, TEAMS, IPlayer, IRound, IScores } from './shared/constants';\nimport socket from './services/socket/socket';\nimport Game from './components/Game/Game';\n\nconsole.log(process.env);\n\nconst LOBBY_STATE = {\n  LOGIN: \"login\",\n  GAME: \"game\",\n};\n\nconst App: React.FC = () => {\n  console.log(process.env);\n  const [roomName, setRoomName] = React.useState(\"\");\n  const [playerName, setPlayerName] = React.useState(\"\");\n  const [player, setPlayer] = React.useState<IPlayer | null>(null);\n  const [lobbyState, setLobbyState] = React.useState(LOBBY_STATE.LOGIN);\n  const [players, setPlayers] = React.useState<IPlayer[]>([]);\n  const [gameState, setGameState] = React.useState(GAME_STATE.WAITING);\n  const [round, setRound] = React.useState<IRound>({\n    number: 0,\n    state: ROUND_STATE.WAITING,\n    speaker: null as any,\n    watcher: null as any,\n  });\n  const [scores, setScores] = React.useState<IScores>({ [TEAMS[0]]: 0, [TEAMS[1]]: 0 });\n  const [card, setCard] = React.useState<ICard | null>(null);\n\n  socket.on(SERVER_EVENTS.GAME_STARTED, (data: EventData[SERVER_EVENTS.GAME_STARTED]) => {\n    setGameState(data.gameState);\n    setRound(data.round);\n  });\n\n  socket.on(SERVER_EVENTS.GAME_STATE, (data: EventData[SERVER_EVENTS.GAME_STATE]) => {\n    setPlayer(data.player);\n    setGameState(data.gameState);\n    setRound(data.round);\n    setScores(data.scores);\n  });\n\n  socket.on(SERVER_EVENTS.PLAYERS_IN_GAME, (data: EventData[SERVER_EVENTS.PLAYERS_IN_GAME]) => {\n    setPlayers(data.players);\n  });\n\n  socket.on(SERVER_EVENTS.DEAL_CARD, (data: EventData[SERVER_EVENTS.DEAL_CARD]) => {\n    setCard(data.card);\n  });\n\n  socket.on(SERVER_EVENTS.UPDATE_SCORES, (data: EventData[SERVER_EVENTS.UPDATE_SCORES]) => {\n    setScores(data.scores);\n  });\n\n  socket.on(SERVER_EVENTS.ROUND_STARTED, (data: EventData[SERVER_EVENTS.ROUND_STARTED]) => {\n    setRound(data.round);\n  });\n\n  socket.on(SERVER_EVENTS.ROUND_ENDED, (data: EventData[SERVER_EVENTS.ROUND_ENDED]) => {\n    setRound(data.round);\n  });\n\n  switch (lobbyState) {\n    case LOBBY_STATE.LOGIN:\n      return (\n        <React.Fragment>\n          <div>\n            <label>Nome da sala:</label>\n            <input\n              id=\"roomName\"\n              value={roomName}\n              onChange={(e) => setRoomName(e.target.value)}\n            ></input>\n          </div>\n          <div>\n            <label>Nome do jogador:</label>\n            <input\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n            ></input>\n          </div>\n          <button\n            onClick={() => {\n              socket.emit(CLIENT_EVENTS.JOIN, { roomName, playerName } as EventData[CLIENT_EVENTS]);\n              setLobbyState(LOBBY_STATE.GAME);\n            }}\n          >\n            Entrar\n          </button>\n        </React.Fragment>\n      );\n    case LOBBY_STATE.GAME:\n      return (\n        <React.Fragment>\n          <div>Sala: {roomName}</div>\n          <div>Seu nome: {playerName}</div>\n          <div>Time 1 (Score: {scores[TEAMS[0]]}):</div>\n          <div>\n            {players\n              .filter((player) => player.team === TEAMS[0])\n              .map((player) => (\n                <div key={player.id}>{player.name}</div>\n              ))}\n          </div>\n          <div>Time 2 (Score: {scores[TEAMS[1]]}):</div>\n          {players\n            .filter((player) => player.team === TEAMS[1])\n            .map((player) => (\n              <div key={player.id}>{player.name}</div>\n            ))}\n          <div>Round: {round.number}</div>\n          <Game\n            roomName={roomName}\n            gameState={gameState}\n            player={player as IPlayer}\n            round={round}\n            card={card as ICard}\n          />\n        </React.Fragment>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}